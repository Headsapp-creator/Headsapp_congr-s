generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PARTICIPANT
  SPEAKER
  COMMITTEE
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  COMPLETED
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  nom             String
  prenom          String
  email           String    @unique
  phone           String?
  country         String?
  address         String?
  password        String    @default("Contact123*")
  statut          String    @default("ACTIVE")
  role            UserRole  @default(PARTICIPANT)
  dateInscription DateTime? @default(now())

  privileges String[]

  statutInscription String? @default("PENDING")

  biographie String?
  specialite String?
  experience Int?    @default(0)

  isVerified                 Boolean                @default(false)
  verificationToken          Int?
  verificationTokenExpiresAt DateTime?              @default(now())
  resetPasswordToken         Int?
  resetPasswordExpiresAt     DateTime?
  lastLogin                  DateTime?

  documents                  Document[]
  sessions                   Session[]
  comites                    ComiteMember[]
  badges                     Badge[]
  attestations               Attestation[]
  communications             Communication[]
  ParticipantProgramme       ParticipantProgramme[]
  notifications              Notification[]         @relation("UserNotifications")
  reviewerNotifications      Notification[]         @relation("ReviewerNotifications")

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ReviewerAssignment ReviewerAssignment[]
}

model Badge {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  nom             String
  description     String
  imageUrl        String?
  dateAttribution DateTime @default(now())

  utilisateur   User   @relation(fields: [utilisateurId], references: [id])
  utilisateurId String @db.ObjectId
  event         Event  @relation(fields: [eventId], references: [id])
  eventId       String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([utilisateurId, eventId])
}

model Attestation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  nom          String
  description  String
  dateEmission DateTime @default(now())

  utilisateur   User   @relation(fields: [utilisateurId], references: [id])
  utilisateurId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  nom                String
  dateDebut          DateTime
  dateFin            DateTime
  description        String
  image              String?
  status             EventStatus @default(DRAFT)
  capacity           Int?
  selectedAttributes Json?
  pricingSteps       Json?
  activityOptions    Json?

  programmes         Programme[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Badge Badge[]
  Communication Communication[]
  ParticipantProgramme ParticipantProgramme[]
}

model Programme {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  nom         String
  description String
  capacity    Int?
  price       Float?

  event    Event     @relation(fields: [eventId], references: [id])
  eventId  String    @db.ObjectId
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParticipantProgramme {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  participantId       String   @db.ObjectId
  eventId             String   @db.ObjectId
  programmeIds        String[]
  formData            Json?
  takeoverDocumentUrl String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  checkedIn           Boolean  @default(false)

  event       Event @relation(fields: [eventId], references: [id])
  participant User  @relation(fields: [participantId], references: [id])

  @@unique([participantId, eventId])
}

model Session {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  titre       String
  description String?
  heureDebut  DateTime
  heureFin    DateTime

  programme   Programme @relation(fields: [programmeId], references: [id])
  programmeId String    @db.ObjectId
  speaker     User      @relation(fields: [speakerId], references: [id])
  speakerId   String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Localisation {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  adresse        String
  ville          String
  coordonneesGPS String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comite {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  nom String

  membres   ComiteMember[]
  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ComiteMember {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  comite   Comite @relation(fields: [comiteId], references: [id])
  comiteId String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  nom            String
  format         String
  contenu        String?
  dateSoumission DateTime       @default(now())
  statut         DocumentStatus @default(PENDING)

  soumisPar   User    @relation(fields: [soumisParId], references: [id])
  soumisParId String  @db.ObjectId
  comite      Comite? @relation(fields: [comiteId], references: [id])
  comiteId    String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Communication {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  typeOfAbstract      String
  speciality          String
  title               String
  mainAuthor          String
  coAuthors           String[]
  email               String
  phone               String?
  service             String
  institution         String?
  pays                String?
  ville               String?
  introduction          String
  methods             String?
  casePresentation    String?
  results             String?
  filePath            String
  conclusion          String
  status              String               @default("pending")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String               @db.ObjectId
  user                User                 @relation(fields: [userId], references: [id])
  eventId             String?              @db.ObjectId
  event               Event?               @relation(fields: [eventId], references: [id])
  committee           String?
  feedback            String?
  reviewerAssignments ReviewerAssignment[]

  Notification Notification[]
}

model ReviewerAssignment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  communication   Communication @relation(fields: [communicationId], references: [id])
  communicationId String        @db.ObjectId
  reviewer        User          @relation(fields: [reviewerId], references: [id])
  reviewerId      String        @db.ObjectId
  score           Float?

  tracking        Tracking?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tracking {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  assignment   ReviewerAssignment @relation(fields: [assignmentId], references: [id])
  assignmentId String             @unique @db.ObjectId
  viewed       Boolean            @default(false)
  viewedAt     DateTime?
  downloaded   Boolean            @default(false)
  downloadedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  reviewerId String   @db.ObjectId
  reviewer   User     @relation("ReviewerNotifications", fields: [reviewerId], references: [id])
  userId     String?  @db.ObjectId
  user       User?    @relation("UserNotifications", fields: [userId], references: [id])

  communicationId String?        @unique @db.ObjectId
  communication   Communication? @relation(fields: [communicationId], references: [id])
}
